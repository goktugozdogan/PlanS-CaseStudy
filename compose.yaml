version: '3.9'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  broker1:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker1
    container_name: broker1
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker1:29091,EXTERNAL://broker1:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_ADVERTISED_HOST_NAME: broker1
    networks:
      - backend

  broker2:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker2
    container_name: broker2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker2:29092,EXTERNAL://broker2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_ADVERTISED_HOST_NAME: broker2
    networks:
      - backend

  broker3:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker3
    container_name: broker3
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker3:29093,EXTERNAL://broker3:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_ADVERTISED_HOST_NAME: broker3
    networks:
      - backend

  mongodb:
    image: mongo:7.0.9
    container_name: mongodb
    restart: unless-stopped
    ports:
      - '27017:27017'
    volumes:
      - mongo-data-2:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - backend

  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongodb
    networks:
      - backend

  eureka-server:
    build:
      context: ./corenetwork/CoreNetworkRegistry
    container_name: eureka-server
    restart: unless-stopped
    ports:
      - '8761:8761'
    networks:
      - backend

  configserver:
    build:
      context: ./corenetwork/CoreNetworkConfigServer
    container_name: configserver
    restart: unless-stopped
    ports:
      - '8888:8888'
    networks:
      - backend

  devicehub:
    build:
      context: ./corenetwork/
      dockerfile: DeviceHub/Dockerfile
    container_name: devicehub
    restart: unless-stopped
    ports:
      - '8086:8086'
    depends_on:
      - configserver
      - mongodb
      - broker1
    networks:
      - backend
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker1:9091,broker:9092,broker:9093

  userhub:
    build:
      context: ./corenetwork/
      dockerfile: UserHub/Dockerfile
    container_name: userhub
    restart: unless-stopped
    ports:
      - '8087:8087'
    depends_on:
      - configserver
      - mongodb
      - broker1
    networks:
      - backend
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker1:9091,broker:9092,broker:9093
      CORENETWORK_DEVICEHUB_URL: http://devicehub:8086/devicehub
      CORENETWORK_IOTDATAHUB_URL: http://iotdatahub:8088/iotdatahub

  iotdatahub:
    build:
      context: ./corenetwork/
      dockerfile: IoTDataHub/Dockerfile
    container_name: iotdatahub
    restart: unless-stopped
    ports:
      - '8088:8088'
    depends_on:
      - configserver
      - mongodb
      - broker1
    networks:
      - backend
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker1:9091,broker:9092,broker:9093

  frontend:
    container_name: frontend
    build: ./corenetwork-web
    volumes:
      - './:/app'
      - '/app/node_modules'
    ports:
      - "3000:3000"
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: npm start

volumes:
  mongo-data-2:

networks:
  frontend:
  backend:
    driver: bridge